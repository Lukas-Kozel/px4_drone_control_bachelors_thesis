// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drone_pose_stamped.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_drone_5fpose_5fstamped_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_drone_5fpose_5fstamped_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_drone_5fpose_5fstamped_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_drone_5fpose_5fstamped_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_drone_5fpose_5fstamped_2eproto;
namespace drone_pose_plugin {
class DroneHeader;
class DroneHeaderDefaultTypeInternal;
extern DroneHeaderDefaultTypeInternal _DroneHeader_default_instance_;
class DroneHeader_DataEntry_DoNotUse;
class DroneHeader_DataEntry_DoNotUseDefaultTypeInternal;
extern DroneHeader_DataEntry_DoNotUseDefaultTypeInternal _DroneHeader_DataEntry_DoNotUse_default_instance_;
class DroneHeader_DroneStamp;
class DroneHeader_DroneStampDefaultTypeInternal;
extern DroneHeader_DroneStampDefaultTypeInternal _DroneHeader_DroneStamp_default_instance_;
class DronePose;
class DronePoseDefaultTypeInternal;
extern DronePoseDefaultTypeInternal _DronePose_default_instance_;
class DronePoseStamped;
class DronePoseStampedDefaultTypeInternal;
extern DronePoseStampedDefaultTypeInternal _DronePoseStamped_default_instance_;
class DronePose_Orientation;
class DronePose_OrientationDefaultTypeInternal;
extern DronePose_OrientationDefaultTypeInternal _DronePose_Orientation_default_instance_;
class DronePose_Position;
class DronePose_PositionDefaultTypeInternal;
extern DronePose_PositionDefaultTypeInternal _DronePose_Position_default_instance_;
}  // namespace drone_pose_plugin
PROTOBUF_NAMESPACE_OPEN
template<> ::drone_pose_plugin::DroneHeader* Arena::CreateMaybeMessage<::drone_pose_plugin::DroneHeader>(Arena*);
template<> ::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse>(Arena*);
template<> ::drone_pose_plugin::DroneHeader_DroneStamp* Arena::CreateMaybeMessage<::drone_pose_plugin::DroneHeader_DroneStamp>(Arena*);
template<> ::drone_pose_plugin::DronePose* Arena::CreateMaybeMessage<::drone_pose_plugin::DronePose>(Arena*);
template<> ::drone_pose_plugin::DronePoseStamped* Arena::CreateMaybeMessage<::drone_pose_plugin::DronePoseStamped>(Arena*);
template<> ::drone_pose_plugin::DronePose_Orientation* Arena::CreateMaybeMessage<::drone_pose_plugin::DronePose_Orientation>(Arena*);
template<> ::drone_pose_plugin::DronePose_Position* Arena::CreateMaybeMessage<::drone_pose_plugin::DronePose_Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace drone_pose_plugin {

// ===================================================================

class DroneHeader_DroneStamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:drone_pose_plugin.DroneHeader.DroneStamp) */ {
 public:
  inline DroneHeader_DroneStamp() : DroneHeader_DroneStamp(nullptr) {};
  virtual ~DroneHeader_DroneStamp();

  DroneHeader_DroneStamp(const DroneHeader_DroneStamp& from);
  DroneHeader_DroneStamp(DroneHeader_DroneStamp&& from) noexcept
    : DroneHeader_DroneStamp() {
    *this = ::std::move(from);
  }

  inline DroneHeader_DroneStamp& operator=(const DroneHeader_DroneStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneHeader_DroneStamp& operator=(DroneHeader_DroneStamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DroneHeader_DroneStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DroneHeader_DroneStamp* internal_default_instance() {
    return reinterpret_cast<const DroneHeader_DroneStamp*>(
               &_DroneHeader_DroneStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DroneHeader_DroneStamp& a, DroneHeader_DroneStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneHeader_DroneStamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneHeader_DroneStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneHeader_DroneStamp* New() const final {
    return CreateMaybeMessage<DroneHeader_DroneStamp>(nullptr);
  }

  DroneHeader_DroneStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneHeader_DroneStamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DroneHeader_DroneStamp& from);
  void MergeFrom(const DroneHeader_DroneStamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneHeader_DroneStamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drone_pose_plugin.DroneHeader.DroneStamp";
  }
  protected:
  explicit DroneHeader_DroneStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fpose_5fstamped_2eproto);
    return ::descriptor_table_drone_5fpose_5fstamped_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kNsecFieldNumber = 2,
  };
  // int64 sec = 1;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::int64 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 nsec = 2;
  void clear_nsec();
  ::PROTOBUF_NAMESPACE_ID::int32 nsec() const;
  void set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nsec() const;
  void _internal_set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:drone_pose_plugin.DroneHeader.DroneStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 nsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fpose_5fstamped_2eproto;
};
// -------------------------------------------------------------------

class DroneHeader_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DroneHeader_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DroneHeader_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DroneHeader_DataEntry_DoNotUse();
  DroneHeader_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DroneHeader_DataEntry_DoNotUse& other);
  static const DroneHeader_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DroneHeader_DataEntry_DoNotUse*>(&_DroneHeader_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "drone_pose_plugin.DroneHeader.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "drone_pose_plugin.DroneHeader.DataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fpose_5fstamped_2eproto);
    return ::descriptor_table_drone_5fpose_5fstamped_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class DroneHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:drone_pose_plugin.DroneHeader) */ {
 public:
  inline DroneHeader() : DroneHeader(nullptr) {};
  virtual ~DroneHeader();

  DroneHeader(const DroneHeader& from);
  DroneHeader(DroneHeader&& from) noexcept
    : DroneHeader() {
    *this = ::std::move(from);
  }

  inline DroneHeader& operator=(const DroneHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneHeader& operator=(DroneHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DroneHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DroneHeader* internal_default_instance() {
    return reinterpret_cast<const DroneHeader*>(
               &_DroneHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DroneHeader& a, DroneHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneHeader* New() const final {
    return CreateMaybeMessage<DroneHeader>(nullptr);
  }

  DroneHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DroneHeader& from);
  void MergeFrom(const DroneHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drone_pose_plugin.DroneHeader";
  }
  protected:
  explicit DroneHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fpose_5fstamped_2eproto);
    return ::descriptor_table_drone_5fpose_5fstamped_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DroneHeader_DroneStamp DroneStamp;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStampFieldNumber = 1,
  };
  // map<string, string> data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // .drone_pose_plugin.DroneHeader.DroneStamp stamp = 1;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  const ::drone_pose_plugin::DroneHeader_DroneStamp& stamp() const;
  ::drone_pose_plugin::DroneHeader_DroneStamp* release_stamp();
  ::drone_pose_plugin::DroneHeader_DroneStamp* mutable_stamp();
  void set_allocated_stamp(::drone_pose_plugin::DroneHeader_DroneStamp* stamp);
  private:
  const ::drone_pose_plugin::DroneHeader_DroneStamp& _internal_stamp() const;
  ::drone_pose_plugin::DroneHeader_DroneStamp* _internal_mutable_stamp();
  public:
  void unsafe_arena_set_allocated_stamp(
      ::drone_pose_plugin::DroneHeader_DroneStamp* stamp);
  ::drone_pose_plugin::DroneHeader_DroneStamp* unsafe_arena_release_stamp();

  // @@protoc_insertion_point(class_scope:drone_pose_plugin.DroneHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DroneHeader_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > data_;
  ::drone_pose_plugin::DroneHeader_DroneStamp* stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fpose_5fstamped_2eproto;
};
// -------------------------------------------------------------------

class DronePose_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:drone_pose_plugin.DronePose.Position) */ {
 public:
  inline DronePose_Position() : DronePose_Position(nullptr) {};
  virtual ~DronePose_Position();

  DronePose_Position(const DronePose_Position& from);
  DronePose_Position(DronePose_Position&& from) noexcept
    : DronePose_Position() {
    *this = ::std::move(from);
  }

  inline DronePose_Position& operator=(const DronePose_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline DronePose_Position& operator=(DronePose_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DronePose_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DronePose_Position* internal_default_instance() {
    return reinterpret_cast<const DronePose_Position*>(
               &_DronePose_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DronePose_Position& a, DronePose_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(DronePose_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DronePose_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DronePose_Position* New() const final {
    return CreateMaybeMessage<DronePose_Position>(nullptr);
  }

  DronePose_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DronePose_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DronePose_Position& from);
  void MergeFrom(const DronePose_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DronePose_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drone_pose_plugin.DronePose.Position";
  }
  protected:
  explicit DronePose_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fpose_5fstamped_2eproto);
    return ::descriptor_table_drone_5fpose_5fstamped_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:drone_pose_plugin.DronePose.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fpose_5fstamped_2eproto;
};
// -------------------------------------------------------------------

class DronePose_Orientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:drone_pose_plugin.DronePose.Orientation) */ {
 public:
  inline DronePose_Orientation() : DronePose_Orientation(nullptr) {};
  virtual ~DronePose_Orientation();

  DronePose_Orientation(const DronePose_Orientation& from);
  DronePose_Orientation(DronePose_Orientation&& from) noexcept
    : DronePose_Orientation() {
    *this = ::std::move(from);
  }

  inline DronePose_Orientation& operator=(const DronePose_Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DronePose_Orientation& operator=(DronePose_Orientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DronePose_Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DronePose_Orientation* internal_default_instance() {
    return reinterpret_cast<const DronePose_Orientation*>(
               &_DronePose_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DronePose_Orientation& a, DronePose_Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(DronePose_Orientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DronePose_Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DronePose_Orientation* New() const final {
    return CreateMaybeMessage<DronePose_Orientation>(nullptr);
  }

  DronePose_Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DronePose_Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DronePose_Orientation& from);
  void MergeFrom(const DronePose_Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DronePose_Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drone_pose_plugin.DronePose.Orientation";
  }
  protected:
  explicit DronePose_Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fpose_5fstamped_2eproto);
    return ::descriptor_table_drone_5fpose_5fstamped_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // double w = 1;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:drone_pose_plugin.DronePose.Orientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double w_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fpose_5fstamped_2eproto;
};
// -------------------------------------------------------------------

class DronePose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:drone_pose_plugin.DronePose) */ {
 public:
  inline DronePose() : DronePose(nullptr) {};
  virtual ~DronePose();

  DronePose(const DronePose& from);
  DronePose(DronePose&& from) noexcept
    : DronePose() {
    *this = ::std::move(from);
  }

  inline DronePose& operator=(const DronePose& from) {
    CopyFrom(from);
    return *this;
  }
  inline DronePose& operator=(DronePose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DronePose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DronePose* internal_default_instance() {
    return reinterpret_cast<const DronePose*>(
               &_DronePose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DronePose& a, DronePose& b) {
    a.Swap(&b);
  }
  inline void Swap(DronePose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DronePose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DronePose* New() const final {
    return CreateMaybeMessage<DronePose>(nullptr);
  }

  DronePose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DronePose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DronePose& from);
  void MergeFrom(const DronePose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DronePose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drone_pose_plugin.DronePose";
  }
  protected:
  explicit DronePose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fpose_5fstamped_2eproto);
    return ::descriptor_table_drone_5fpose_5fstamped_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DronePose_Position Position;
  typedef DronePose_Orientation Orientation;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .drone_pose_plugin.DronePose.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::drone_pose_plugin::DronePose_Position& position() const;
  ::drone_pose_plugin::DronePose_Position* release_position();
  ::drone_pose_plugin::DronePose_Position* mutable_position();
  void set_allocated_position(::drone_pose_plugin::DronePose_Position* position);
  private:
  const ::drone_pose_plugin::DronePose_Position& _internal_position() const;
  ::drone_pose_plugin::DronePose_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::drone_pose_plugin::DronePose_Position* position);
  ::drone_pose_plugin::DronePose_Position* unsafe_arena_release_position();

  // .drone_pose_plugin.DronePose.Orientation orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::drone_pose_plugin::DronePose_Orientation& orientation() const;
  ::drone_pose_plugin::DronePose_Orientation* release_orientation();
  ::drone_pose_plugin::DronePose_Orientation* mutable_orientation();
  void set_allocated_orientation(::drone_pose_plugin::DronePose_Orientation* orientation);
  private:
  const ::drone_pose_plugin::DronePose_Orientation& _internal_orientation() const;
  ::drone_pose_plugin::DronePose_Orientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::drone_pose_plugin::DronePose_Orientation* orientation);
  ::drone_pose_plugin::DronePose_Orientation* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:drone_pose_plugin.DronePose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::drone_pose_plugin::DronePose_Position* position_;
  ::drone_pose_plugin::DronePose_Orientation* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fpose_5fstamped_2eproto;
};
// -------------------------------------------------------------------

class DronePoseStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:drone_pose_plugin.DronePoseStamped) */ {
 public:
  inline DronePoseStamped() : DronePoseStamped(nullptr) {};
  virtual ~DronePoseStamped();

  DronePoseStamped(const DronePoseStamped& from);
  DronePoseStamped(DronePoseStamped&& from) noexcept
    : DronePoseStamped() {
    *this = ::std::move(from);
  }

  inline DronePoseStamped& operator=(const DronePoseStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline DronePoseStamped& operator=(DronePoseStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DronePoseStamped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DronePoseStamped* internal_default_instance() {
    return reinterpret_cast<const DronePoseStamped*>(
               &_DronePoseStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DronePoseStamped& a, DronePoseStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(DronePoseStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DronePoseStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DronePoseStamped* New() const final {
    return CreateMaybeMessage<DronePoseStamped>(nullptr);
  }

  DronePoseStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DronePoseStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DronePoseStamped& from);
  void MergeFrom(const DronePoseStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DronePoseStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drone_pose_plugin.DronePoseStamped";
  }
  protected:
  explicit DronePoseStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fpose_5fstamped_2eproto);
    return ::descriptor_table_drone_5fpose_5fstamped_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .drone_pose_plugin.DroneHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::drone_pose_plugin::DroneHeader& header() const;
  ::drone_pose_plugin::DroneHeader* release_header();
  ::drone_pose_plugin::DroneHeader* mutable_header();
  void set_allocated_header(::drone_pose_plugin::DroneHeader* header);
  private:
  const ::drone_pose_plugin::DroneHeader& _internal_header() const;
  ::drone_pose_plugin::DroneHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::drone_pose_plugin::DroneHeader* header);
  ::drone_pose_plugin::DroneHeader* unsafe_arena_release_header();

  // .drone_pose_plugin.DronePose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::drone_pose_plugin::DronePose& pose() const;
  ::drone_pose_plugin::DronePose* release_pose();
  ::drone_pose_plugin::DronePose* mutable_pose();
  void set_allocated_pose(::drone_pose_plugin::DronePose* pose);
  private:
  const ::drone_pose_plugin::DronePose& _internal_pose() const;
  ::drone_pose_plugin::DronePose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::drone_pose_plugin::DronePose* pose);
  ::drone_pose_plugin::DronePose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:drone_pose_plugin.DronePoseStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::drone_pose_plugin::DroneHeader* header_;
  ::drone_pose_plugin::DronePose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fpose_5fstamped_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DroneHeader_DroneStamp

// int64 sec = 1;
inline void DroneHeader_DroneStamp::clear_sec() {
  sec_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DroneHeader_DroneStamp::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DroneHeader_DroneStamp::sec() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DroneHeader.DroneStamp.sec)
  return _internal_sec();
}
inline void DroneHeader_DroneStamp::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sec_ = value;
}
inline void DroneHeader_DroneStamp::set_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DroneHeader.DroneStamp.sec)
}

// int32 nsec = 2;
inline void DroneHeader_DroneStamp::clear_nsec() {
  nsec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneHeader_DroneStamp::_internal_nsec() const {
  return nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneHeader_DroneStamp::nsec() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DroneHeader.DroneStamp.nsec)
  return _internal_nsec();
}
inline void DroneHeader_DroneStamp::_internal_set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nsec_ = value;
}
inline void DroneHeader_DroneStamp::set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DroneHeader.DroneStamp.nsec)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DroneHeader

// .drone_pose_plugin.DroneHeader.DroneStamp stamp = 1;
inline bool DroneHeader::_internal_has_stamp() const {
  return this != internal_default_instance() && stamp_ != nullptr;
}
inline bool DroneHeader::has_stamp() const {
  return _internal_has_stamp();
}
inline void DroneHeader::clear_stamp() {
  if (GetArena() == nullptr && stamp_ != nullptr) {
    delete stamp_;
  }
  stamp_ = nullptr;
}
inline const ::drone_pose_plugin::DroneHeader_DroneStamp& DroneHeader::_internal_stamp() const {
  const ::drone_pose_plugin::DroneHeader_DroneStamp* p = stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::drone_pose_plugin::DroneHeader_DroneStamp*>(
      &::drone_pose_plugin::_DroneHeader_DroneStamp_default_instance_);
}
inline const ::drone_pose_plugin::DroneHeader_DroneStamp& DroneHeader::stamp() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DroneHeader.stamp)
  return _internal_stamp();
}
inline void DroneHeader::unsafe_arena_set_allocated_stamp(
    ::drone_pose_plugin::DroneHeader_DroneStamp* stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_);
  }
  stamp_ = stamp;
  if (stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:drone_pose_plugin.DroneHeader.stamp)
}
inline ::drone_pose_plugin::DroneHeader_DroneStamp* DroneHeader::release_stamp() {
  auto temp = unsafe_arena_release_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::drone_pose_plugin::DroneHeader_DroneStamp* DroneHeader::unsafe_arena_release_stamp() {
  // @@protoc_insertion_point(field_release:drone_pose_plugin.DroneHeader.stamp)
  
  ::drone_pose_plugin::DroneHeader_DroneStamp* temp = stamp_;
  stamp_ = nullptr;
  return temp;
}
inline ::drone_pose_plugin::DroneHeader_DroneStamp* DroneHeader::_internal_mutable_stamp() {
  
  if (stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::drone_pose_plugin::DroneHeader_DroneStamp>(GetArena());
    stamp_ = p;
  }
  return stamp_;
}
inline ::drone_pose_plugin::DroneHeader_DroneStamp* DroneHeader::mutable_stamp() {
  // @@protoc_insertion_point(field_mutable:drone_pose_plugin.DroneHeader.stamp)
  return _internal_mutable_stamp();
}
inline void DroneHeader::set_allocated_stamp(::drone_pose_plugin::DroneHeader_DroneStamp* stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stamp_;
  }
  if (stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stamp);
    if (message_arena != submessage_arena) {
      stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    
  } else {
    
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:drone_pose_plugin.DroneHeader.stamp)
}

// map<string, string> data = 2;
inline int DroneHeader::_internal_data_size() const {
  return data_.size();
}
inline int DroneHeader::data_size() const {
  return _internal_data_size();
}
inline void DroneHeader::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DroneHeader::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DroneHeader::data() const {
  // @@protoc_insertion_point(field_map:drone_pose_plugin.DroneHeader.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DroneHeader::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DroneHeader::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:drone_pose_plugin.DroneHeader.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// DronePose_Position

// double x = 1;
inline void DronePose_Position::clear_x() {
  x_ = 0;
}
inline double DronePose_Position::_internal_x() const {
  return x_;
}
inline double DronePose_Position::x() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.Position.x)
  return _internal_x();
}
inline void DronePose_Position::_internal_set_x(double value) {
  
  x_ = value;
}
inline void DronePose_Position::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DronePose.Position.x)
}

// double y = 2;
inline void DronePose_Position::clear_y() {
  y_ = 0;
}
inline double DronePose_Position::_internal_y() const {
  return y_;
}
inline double DronePose_Position::y() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.Position.y)
  return _internal_y();
}
inline void DronePose_Position::_internal_set_y(double value) {
  
  y_ = value;
}
inline void DronePose_Position::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DronePose.Position.y)
}

// double z = 3;
inline void DronePose_Position::clear_z() {
  z_ = 0;
}
inline double DronePose_Position::_internal_z() const {
  return z_;
}
inline double DronePose_Position::z() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.Position.z)
  return _internal_z();
}
inline void DronePose_Position::_internal_set_z(double value) {
  
  z_ = value;
}
inline void DronePose_Position::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DronePose.Position.z)
}

// -------------------------------------------------------------------

// DronePose_Orientation

// double w = 1;
inline void DronePose_Orientation::clear_w() {
  w_ = 0;
}
inline double DronePose_Orientation::_internal_w() const {
  return w_;
}
inline double DronePose_Orientation::w() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.Orientation.w)
  return _internal_w();
}
inline void DronePose_Orientation::_internal_set_w(double value) {
  
  w_ = value;
}
inline void DronePose_Orientation::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DronePose.Orientation.w)
}

// double x = 2;
inline void DronePose_Orientation::clear_x() {
  x_ = 0;
}
inline double DronePose_Orientation::_internal_x() const {
  return x_;
}
inline double DronePose_Orientation::x() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.Orientation.x)
  return _internal_x();
}
inline void DronePose_Orientation::_internal_set_x(double value) {
  
  x_ = value;
}
inline void DronePose_Orientation::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DronePose.Orientation.x)
}

// double y = 3;
inline void DronePose_Orientation::clear_y() {
  y_ = 0;
}
inline double DronePose_Orientation::_internal_y() const {
  return y_;
}
inline double DronePose_Orientation::y() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.Orientation.y)
  return _internal_y();
}
inline void DronePose_Orientation::_internal_set_y(double value) {
  
  y_ = value;
}
inline void DronePose_Orientation::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DronePose.Orientation.y)
}

// double z = 4;
inline void DronePose_Orientation::clear_z() {
  z_ = 0;
}
inline double DronePose_Orientation::_internal_z() const {
  return z_;
}
inline double DronePose_Orientation::z() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.Orientation.z)
  return _internal_z();
}
inline void DronePose_Orientation::_internal_set_z(double value) {
  
  z_ = value;
}
inline void DronePose_Orientation::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:drone_pose_plugin.DronePose.Orientation.z)
}

// -------------------------------------------------------------------

// DronePose

// .drone_pose_plugin.DronePose.Position position = 1;
inline bool DronePose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool DronePose::has_position() const {
  return _internal_has_position();
}
inline void DronePose::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::drone_pose_plugin::DronePose_Position& DronePose::_internal_position() const {
  const ::drone_pose_plugin::DronePose_Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::drone_pose_plugin::DronePose_Position*>(
      &::drone_pose_plugin::_DronePose_Position_default_instance_);
}
inline const ::drone_pose_plugin::DronePose_Position& DronePose::position() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.position)
  return _internal_position();
}
inline void DronePose::unsafe_arena_set_allocated_position(
    ::drone_pose_plugin::DronePose_Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:drone_pose_plugin.DronePose.position)
}
inline ::drone_pose_plugin::DronePose_Position* DronePose::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::drone_pose_plugin::DronePose_Position* DronePose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:drone_pose_plugin.DronePose.position)
  
  ::drone_pose_plugin::DronePose_Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::drone_pose_plugin::DronePose_Position* DronePose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::drone_pose_plugin::DronePose_Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::drone_pose_plugin::DronePose_Position* DronePose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:drone_pose_plugin.DronePose.position)
  return _internal_mutable_position();
}
inline void DronePose::set_allocated_position(::drone_pose_plugin::DronePose_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:drone_pose_plugin.DronePose.position)
}

// .drone_pose_plugin.DronePose.Orientation orientation = 2;
inline bool DronePose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool DronePose::has_orientation() const {
  return _internal_has_orientation();
}
inline void DronePose::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::drone_pose_plugin::DronePose_Orientation& DronePose::_internal_orientation() const {
  const ::drone_pose_plugin::DronePose_Orientation* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::drone_pose_plugin::DronePose_Orientation*>(
      &::drone_pose_plugin::_DronePose_Orientation_default_instance_);
}
inline const ::drone_pose_plugin::DronePose_Orientation& DronePose::orientation() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePose.orientation)
  return _internal_orientation();
}
inline void DronePose::unsafe_arena_set_allocated_orientation(
    ::drone_pose_plugin::DronePose_Orientation* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:drone_pose_plugin.DronePose.orientation)
}
inline ::drone_pose_plugin::DronePose_Orientation* DronePose::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::drone_pose_plugin::DronePose_Orientation* DronePose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:drone_pose_plugin.DronePose.orientation)
  
  ::drone_pose_plugin::DronePose_Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::drone_pose_plugin::DronePose_Orientation* DronePose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::drone_pose_plugin::DronePose_Orientation>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::drone_pose_plugin::DronePose_Orientation* DronePose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:drone_pose_plugin.DronePose.orientation)
  return _internal_mutable_orientation();
}
inline void DronePose::set_allocated_orientation(::drone_pose_plugin::DronePose_Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:drone_pose_plugin.DronePose.orientation)
}

// -------------------------------------------------------------------

// DronePoseStamped

// .drone_pose_plugin.DroneHeader header = 1;
inline bool DronePoseStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DronePoseStamped::has_header() const {
  return _internal_has_header();
}
inline void DronePoseStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::drone_pose_plugin::DroneHeader& DronePoseStamped::_internal_header() const {
  const ::drone_pose_plugin::DroneHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::drone_pose_plugin::DroneHeader*>(
      &::drone_pose_plugin::_DroneHeader_default_instance_);
}
inline const ::drone_pose_plugin::DroneHeader& DronePoseStamped::header() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePoseStamped.header)
  return _internal_header();
}
inline void DronePoseStamped::unsafe_arena_set_allocated_header(
    ::drone_pose_plugin::DroneHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:drone_pose_plugin.DronePoseStamped.header)
}
inline ::drone_pose_plugin::DroneHeader* DronePoseStamped::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::drone_pose_plugin::DroneHeader* DronePoseStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:drone_pose_plugin.DronePoseStamped.header)
  
  ::drone_pose_plugin::DroneHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::drone_pose_plugin::DroneHeader* DronePoseStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::drone_pose_plugin::DroneHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::drone_pose_plugin::DroneHeader* DronePoseStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:drone_pose_plugin.DronePoseStamped.header)
  return _internal_mutable_header();
}
inline void DronePoseStamped::set_allocated_header(::drone_pose_plugin::DroneHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:drone_pose_plugin.DronePoseStamped.header)
}

// .drone_pose_plugin.DronePose pose = 2;
inline bool DronePoseStamped::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool DronePoseStamped::has_pose() const {
  return _internal_has_pose();
}
inline void DronePoseStamped::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::drone_pose_plugin::DronePose& DronePoseStamped::_internal_pose() const {
  const ::drone_pose_plugin::DronePose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::drone_pose_plugin::DronePose*>(
      &::drone_pose_plugin::_DronePose_default_instance_);
}
inline const ::drone_pose_plugin::DronePose& DronePoseStamped::pose() const {
  // @@protoc_insertion_point(field_get:drone_pose_plugin.DronePoseStamped.pose)
  return _internal_pose();
}
inline void DronePoseStamped::unsafe_arena_set_allocated_pose(
    ::drone_pose_plugin::DronePose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:drone_pose_plugin.DronePoseStamped.pose)
}
inline ::drone_pose_plugin::DronePose* DronePoseStamped::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::drone_pose_plugin::DronePose* DronePoseStamped::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:drone_pose_plugin.DronePoseStamped.pose)
  
  ::drone_pose_plugin::DronePose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::drone_pose_plugin::DronePose* DronePoseStamped::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::drone_pose_plugin::DronePose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::drone_pose_plugin::DronePose* DronePoseStamped::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:drone_pose_plugin.DronePoseStamped.pose)
  return _internal_mutable_pose();
}
inline void DronePoseStamped::set_allocated_pose(::drone_pose_plugin::DronePose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:drone_pose_plugin.DronePoseStamped.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drone_pose_plugin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_drone_5fpose_5fstamped_2eproto
