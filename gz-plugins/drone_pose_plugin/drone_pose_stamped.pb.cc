// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drone_pose_stamped.proto

#include "drone_pose_stamped.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_drone_5fpose_5fstamped_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DroneHeader_drone_5fpose_5fstamped_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_drone_5fpose_5fstamped_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DroneHeader_DataEntry_DoNotUse_drone_5fpose_5fstamped_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_drone_5fpose_5fstamped_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DroneHeader_DroneStamp_drone_5fpose_5fstamped_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_drone_5fpose_5fstamped_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DronePose_drone_5fpose_5fstamped_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_drone_5fpose_5fstamped_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DronePose_Orientation_drone_5fpose_5fstamped_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_drone_5fpose_5fstamped_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DronePose_Position_drone_5fpose_5fstamped_2eproto;
namespace drone_pose_plugin {
class DroneHeader_DroneStampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DroneHeader_DroneStamp> _instance;
} _DroneHeader_DroneStamp_default_instance_;
class DroneHeader_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DroneHeader_DataEntry_DoNotUse> _instance;
} _DroneHeader_DataEntry_DoNotUse_default_instance_;
class DroneHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DroneHeader> _instance;
} _DroneHeader_default_instance_;
class DronePose_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DronePose_Position> _instance;
} _DronePose_Position_default_instance_;
class DronePose_OrientationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DronePose_Orientation> _instance;
} _DronePose_Orientation_default_instance_;
class DronePoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DronePose> _instance;
} _DronePose_default_instance_;
class DronePoseStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DronePoseStamped> _instance;
} _DronePoseStamped_default_instance_;
}  // namespace drone_pose_plugin
static void InitDefaultsscc_info_DroneHeader_drone_5fpose_5fstamped_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::drone_pose_plugin::_DroneHeader_default_instance_;
    new (ptr) ::drone_pose_plugin::DroneHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::drone_pose_plugin::DroneHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DroneHeader_drone_5fpose_5fstamped_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DroneHeader_drone_5fpose_5fstamped_2eproto}, {
      &scc_info_DroneHeader_DroneStamp_drone_5fpose_5fstamped_2eproto.base,
      &scc_info_DroneHeader_DataEntry_DoNotUse_drone_5fpose_5fstamped_2eproto.base,}};

static void InitDefaultsscc_info_DroneHeader_DataEntry_DoNotUse_drone_5fpose_5fstamped_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::drone_pose_plugin::_DroneHeader_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse();
  }
  ::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DroneHeader_DataEntry_DoNotUse_drone_5fpose_5fstamped_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DroneHeader_DataEntry_DoNotUse_drone_5fpose_5fstamped_2eproto}, {}};

static void InitDefaultsscc_info_DroneHeader_DroneStamp_drone_5fpose_5fstamped_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::drone_pose_plugin::_DroneHeader_DroneStamp_default_instance_;
    new (ptr) ::drone_pose_plugin::DroneHeader_DroneStamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::drone_pose_plugin::DroneHeader_DroneStamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DroneHeader_DroneStamp_drone_5fpose_5fstamped_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DroneHeader_DroneStamp_drone_5fpose_5fstamped_2eproto}, {}};

static void InitDefaultsscc_info_DronePose_drone_5fpose_5fstamped_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::drone_pose_plugin::_DronePose_default_instance_;
    new (ptr) ::drone_pose_plugin::DronePose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::drone_pose_plugin::DronePose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DronePose_drone_5fpose_5fstamped_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DronePose_drone_5fpose_5fstamped_2eproto}, {
      &scc_info_DronePose_Position_drone_5fpose_5fstamped_2eproto.base,
      &scc_info_DronePose_Orientation_drone_5fpose_5fstamped_2eproto.base,}};

static void InitDefaultsscc_info_DronePose_Orientation_drone_5fpose_5fstamped_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::drone_pose_plugin::_DronePose_Orientation_default_instance_;
    new (ptr) ::drone_pose_plugin::DronePose_Orientation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::drone_pose_plugin::DronePose_Orientation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DronePose_Orientation_drone_5fpose_5fstamped_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DronePose_Orientation_drone_5fpose_5fstamped_2eproto}, {}};

static void InitDefaultsscc_info_DronePose_Position_drone_5fpose_5fstamped_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::drone_pose_plugin::_DronePose_Position_default_instance_;
    new (ptr) ::drone_pose_plugin::DronePose_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::drone_pose_plugin::DronePose_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DronePose_Position_drone_5fpose_5fstamped_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DronePose_Position_drone_5fpose_5fstamped_2eproto}, {}};

static void InitDefaultsscc_info_DronePoseStamped_drone_5fpose_5fstamped_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::drone_pose_plugin::_DronePoseStamped_default_instance_;
    new (ptr) ::drone_pose_plugin::DronePoseStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::drone_pose_plugin::DronePoseStamped::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DronePoseStamped_drone_5fpose_5fstamped_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DronePoseStamped_drone_5fpose_5fstamped_2eproto}, {
      &scc_info_DroneHeader_drone_5fpose_5fstamped_2eproto.base,
      &scc_info_DronePose_drone_5fpose_5fstamped_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_drone_5fpose_5fstamped_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_drone_5fpose_5fstamped_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_drone_5fpose_5fstamped_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_drone_5fpose_5fstamped_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader_DroneStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader_DroneStamp, sec_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader_DroneStamp, nsec_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader, stamp_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DroneHeader, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Position, x_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Position, y_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Position, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Orientation, w_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Orientation, x_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Orientation, y_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose_Orientation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose, position_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePoseStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePoseStamped, header_),
  PROTOBUF_FIELD_OFFSET(::drone_pose_plugin::DronePoseStamped, pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::drone_pose_plugin::DroneHeader_DroneStamp)},
  { 7, 14, sizeof(::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse)},
  { 16, -1, sizeof(::drone_pose_plugin::DroneHeader)},
  { 23, -1, sizeof(::drone_pose_plugin::DronePose_Position)},
  { 31, -1, sizeof(::drone_pose_plugin::DronePose_Orientation)},
  { 40, -1, sizeof(::drone_pose_plugin::DronePose)},
  { 47, -1, sizeof(::drone_pose_plugin::DronePoseStamped)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drone_pose_plugin::_DroneHeader_DroneStamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drone_pose_plugin::_DroneHeader_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drone_pose_plugin::_DroneHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drone_pose_plugin::_DronePose_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drone_pose_plugin::_DronePose_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drone_pose_plugin::_DronePose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drone_pose_plugin::_DronePoseStamped_default_instance_),
};

const char descriptor_table_protodef_drone_5fpose_5fstamped_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030drone_pose_stamped.proto\022\021drone_pose_p"
  "lugin\"\325\001\n\013DroneHeader\0228\n\005stamp\030\001 \001(\0132).d"
  "rone_pose_plugin.DroneHeader.DroneStamp\022"
  "6\n\004data\030\002 \003(\0132(.drone_pose_plugin.DroneH"
  "eader.DataEntry\032\'\n\nDroneStamp\022\013\n\003sec\030\001 \001"
  "(\003\022\014\n\004nsec\030\002 \001(\005\032+\n\tDataEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\353\001\n\tDronePose\0227\n\010p"
  "osition\030\001 \001(\0132%.drone_pose_plugin.DroneP"
  "ose.Position\022=\n\013orientation\030\002 \001(\0132(.dron"
  "e_pose_plugin.DronePose.Orientation\032+\n\010P"
  "osition\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
  "\0329\n\013Orientation\022\t\n\001w\030\001 \001(\001\022\t\n\001x\030\002 \001(\001\022\t\n"
  "\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\"n\n\020DronePoseStamped\022"
  ".\n\006header\030\001 \001(\0132\036.drone_pose_plugin.Dron"
  "eHeader\022*\n\004pose\030\002 \001(\0132\034.drone_pose_plugi"
  "n.DronePoseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_drone_5fpose_5fstamped_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_drone_5fpose_5fstamped_2eproto_sccs[7] = {
  &scc_info_DroneHeader_drone_5fpose_5fstamped_2eproto.base,
  &scc_info_DroneHeader_DataEntry_DoNotUse_drone_5fpose_5fstamped_2eproto.base,
  &scc_info_DroneHeader_DroneStamp_drone_5fpose_5fstamped_2eproto.base,
  &scc_info_DronePose_drone_5fpose_5fstamped_2eproto.base,
  &scc_info_DronePose_Orientation_drone_5fpose_5fstamped_2eproto.base,
  &scc_info_DronePose_Position_drone_5fpose_5fstamped_2eproto.base,
  &scc_info_DronePoseStamped_drone_5fpose_5fstamped_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_drone_5fpose_5fstamped_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_drone_5fpose_5fstamped_2eproto = {
  false, false, descriptor_table_protodef_drone_5fpose_5fstamped_2eproto, "drone_pose_stamped.proto", 619,
  &descriptor_table_drone_5fpose_5fstamped_2eproto_once, descriptor_table_drone_5fpose_5fstamped_2eproto_sccs, descriptor_table_drone_5fpose_5fstamped_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_drone_5fpose_5fstamped_2eproto::offsets,
  file_level_metadata_drone_5fpose_5fstamped_2eproto, 7, file_level_enum_descriptors_drone_5fpose_5fstamped_2eproto, file_level_service_descriptors_drone_5fpose_5fstamped_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_drone_5fpose_5fstamped_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_drone_5fpose_5fstamped_2eproto)), true);
namespace drone_pose_plugin {

// ===================================================================

void DroneHeader_DroneStamp::InitAsDefaultInstance() {
}
class DroneHeader_DroneStamp::_Internal {
 public:
};

DroneHeader_DroneStamp::DroneHeader_DroneStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:drone_pose_plugin.DroneHeader.DroneStamp)
}
DroneHeader_DroneStamp::DroneHeader_DroneStamp(const DroneHeader_DroneStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&nsec_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(nsec_));
  // @@protoc_insertion_point(copy_constructor:drone_pose_plugin.DroneHeader.DroneStamp)
}

void DroneHeader_DroneStamp::SharedCtor() {
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nsec_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(nsec_));
}

DroneHeader_DroneStamp::~DroneHeader_DroneStamp() {
  // @@protoc_insertion_point(destructor:drone_pose_plugin.DroneHeader.DroneStamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DroneHeader_DroneStamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DroneHeader_DroneStamp::ArenaDtor(void* object) {
  DroneHeader_DroneStamp* _this = reinterpret_cast< DroneHeader_DroneStamp* >(object);
  (void)_this;
}
void DroneHeader_DroneStamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DroneHeader_DroneStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DroneHeader_DroneStamp& DroneHeader_DroneStamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DroneHeader_DroneStamp_drone_5fpose_5fstamped_2eproto.base);
  return *internal_default_instance();
}


void DroneHeader_DroneStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:drone_pose_plugin.DroneHeader.DroneStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nsec_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(nsec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DroneHeader_DroneStamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DroneHeader_DroneStamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drone_pose_plugin.DroneHeader.DroneStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sec = 1;
  if (this->sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sec(), target);
  }

  // int32 nsec = 2;
  if (this->nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drone_pose_plugin.DroneHeader.DroneStamp)
  return target;
}

size_t DroneHeader_DroneStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drone_pose_plugin.DroneHeader.DroneStamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sec = 1;
  if (this->sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sec());
  }

  // int32 nsec = 2;
  if (this->nsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nsec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DroneHeader_DroneStamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drone_pose_plugin.DroneHeader.DroneStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneHeader_DroneStamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DroneHeader_DroneStamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drone_pose_plugin.DroneHeader.DroneStamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drone_pose_plugin.DroneHeader.DroneStamp)
    MergeFrom(*source);
  }
}

void DroneHeader_DroneStamp::MergeFrom(const DroneHeader_DroneStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drone_pose_plugin.DroneHeader.DroneStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sec() != 0) {
    _internal_set_sec(from._internal_sec());
  }
  if (from.nsec() != 0) {
    _internal_set_nsec(from._internal_nsec());
  }
}

void DroneHeader_DroneStamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drone_pose_plugin.DroneHeader.DroneStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneHeader_DroneStamp::CopyFrom(const DroneHeader_DroneStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drone_pose_plugin.DroneHeader.DroneStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneHeader_DroneStamp::IsInitialized() const {
  return true;
}

void DroneHeader_DroneStamp::InternalSwap(DroneHeader_DroneStamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DroneHeader_DroneStamp, nsec_)
      + sizeof(DroneHeader_DroneStamp::nsec_)
      - PROTOBUF_FIELD_OFFSET(DroneHeader_DroneStamp, sec_)>(
          reinterpret_cast<char*>(&sec_),
          reinterpret_cast<char*>(&other->sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DroneHeader_DroneStamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DroneHeader_DataEntry_DoNotUse::DroneHeader_DataEntry_DoNotUse() {}
DroneHeader_DataEntry_DoNotUse::DroneHeader_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DroneHeader_DataEntry_DoNotUse::MergeFrom(const DroneHeader_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DroneHeader_DataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DroneHeader_DataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DroneHeader::InitAsDefaultInstance() {
  ::drone_pose_plugin::_DroneHeader_default_instance_._instance.get_mutable()->stamp_ = const_cast< ::drone_pose_plugin::DroneHeader_DroneStamp*>(
      ::drone_pose_plugin::DroneHeader_DroneStamp::internal_default_instance());
}
class DroneHeader::_Internal {
 public:
  static const ::drone_pose_plugin::DroneHeader_DroneStamp& stamp(const DroneHeader* msg);
};

const ::drone_pose_plugin::DroneHeader_DroneStamp&
DroneHeader::_Internal::stamp(const DroneHeader* msg) {
  return *msg->stamp_;
}
DroneHeader::DroneHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:drone_pose_plugin.DroneHeader)
}
DroneHeader::DroneHeader(const DroneHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  if (from._internal_has_stamp()) {
    stamp_ = new ::drone_pose_plugin::DroneHeader_DroneStamp(*from.stamp_);
  } else {
    stamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drone_pose_plugin.DroneHeader)
}

void DroneHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DroneHeader_drone_5fpose_5fstamped_2eproto.base);
  stamp_ = nullptr;
}

DroneHeader::~DroneHeader() {
  // @@protoc_insertion_point(destructor:drone_pose_plugin.DroneHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DroneHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stamp_;
}

void DroneHeader::ArenaDtor(void* object) {
  DroneHeader* _this = reinterpret_cast< DroneHeader* >(object);
  (void)_this;
}
void DroneHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DroneHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DroneHeader& DroneHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DroneHeader_drone_5fpose_5fstamped_2eproto.base);
  return *internal_default_instance();
}


void DroneHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:drone_pose_plugin.DroneHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArena() == nullptr && stamp_ != nullptr) {
    delete stamp_;
  }
  stamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DroneHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .drone_pose_plugin.DroneHeader.DroneStamp stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DroneHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drone_pose_plugin.DroneHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .drone_pose_plugin.DroneHeader.DroneStamp stamp = 1;
  if (this->has_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stamp(this), target, stream);
  }

  // map<string, string> data = 2;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "drone_pose_plugin.DroneHeader.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "drone_pose_plugin.DroneHeader.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DroneHeader_DataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = DroneHeader_DataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drone_pose_plugin.DroneHeader)
  return target;
}

size_t DroneHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drone_pose_plugin.DroneHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += DroneHeader_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .drone_pose_plugin.DroneHeader.DroneStamp stamp = 1;
  if (this->has_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DroneHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drone_pose_plugin.DroneHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DroneHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drone_pose_plugin.DroneHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drone_pose_plugin.DroneHeader)
    MergeFrom(*source);
  }
}

void DroneHeader::MergeFrom(const DroneHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drone_pose_plugin.DroneHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_stamp()) {
    _internal_mutable_stamp()->::drone_pose_plugin::DroneHeader_DroneStamp::MergeFrom(from._internal_stamp());
  }
}

void DroneHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drone_pose_plugin.DroneHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneHeader::CopyFrom(const DroneHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drone_pose_plugin.DroneHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneHeader::IsInitialized() const {
  return true;
}

void DroneHeader::InternalSwap(DroneHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_);
  swap(stamp_, other->stamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DroneHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DronePose_Position::InitAsDefaultInstance() {
}
class DronePose_Position::_Internal {
 public:
};

DronePose_Position::DronePose_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:drone_pose_plugin.DronePose.Position)
}
DronePose_Position::DronePose_Position(const DronePose_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:drone_pose_plugin.DronePose.Position)
}

void DronePose_Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

DronePose_Position::~DronePose_Position() {
  // @@protoc_insertion_point(destructor:drone_pose_plugin.DronePose.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DronePose_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DronePose_Position::ArenaDtor(void* object) {
  DronePose_Position* _this = reinterpret_cast< DronePose_Position* >(object);
  (void)_this;
}
void DronePose_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DronePose_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DronePose_Position& DronePose_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DronePose_Position_drone_5fpose_5fstamped_2eproto.base);
  return *internal_default_instance();
}


void DronePose_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:drone_pose_plugin.DronePose.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DronePose_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DronePose_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drone_pose_plugin.DronePose.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drone_pose_plugin.DronePose.Position)
  return target;
}

size_t DronePose_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drone_pose_plugin.DronePose.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DronePose_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drone_pose_plugin.DronePose.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const DronePose_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DronePose_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drone_pose_plugin.DronePose.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drone_pose_plugin.DronePose.Position)
    MergeFrom(*source);
  }
}

void DronePose_Position::MergeFrom(const DronePose_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drone_pose_plugin.DronePose.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void DronePose_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drone_pose_plugin.DronePose.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DronePose_Position::CopyFrom(const DronePose_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drone_pose_plugin.DronePose.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DronePose_Position::IsInitialized() const {
  return true;
}

void DronePose_Position::InternalSwap(DronePose_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DronePose_Position, z_)
      + sizeof(DronePose_Position::z_)
      - PROTOBUF_FIELD_OFFSET(DronePose_Position, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DronePose_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DronePose_Orientation::InitAsDefaultInstance() {
}
class DronePose_Orientation::_Internal {
 public:
};

DronePose_Orientation::DronePose_Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:drone_pose_plugin.DronePose.Orientation)
}
DronePose_Orientation::DronePose_Orientation(const DronePose_Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:drone_pose_plugin.DronePose.Orientation)
}

void DronePose_Orientation::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

DronePose_Orientation::~DronePose_Orientation() {
  // @@protoc_insertion_point(destructor:drone_pose_plugin.DronePose.Orientation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DronePose_Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DronePose_Orientation::ArenaDtor(void* object) {
  DronePose_Orientation* _this = reinterpret_cast< DronePose_Orientation* >(object);
  (void)_this;
}
void DronePose_Orientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DronePose_Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DronePose_Orientation& DronePose_Orientation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DronePose_Orientation_drone_5fpose_5fstamped_2eproto.base);
  return *internal_default_instance();
}


void DronePose_Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:drone_pose_plugin.DronePose.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DronePose_Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DronePose_Orientation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drone_pose_plugin.DronePose.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drone_pose_plugin.DronePose.Orientation)
  return target;
}

size_t DronePose_Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drone_pose_plugin.DronePose.Orientation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DronePose_Orientation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drone_pose_plugin.DronePose.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const DronePose_Orientation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DronePose_Orientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drone_pose_plugin.DronePose.Orientation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drone_pose_plugin.DronePose.Orientation)
    MergeFrom(*source);
  }
}

void DronePose_Orientation::MergeFrom(const DronePose_Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drone_pose_plugin.DronePose.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void DronePose_Orientation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drone_pose_plugin.DronePose.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DronePose_Orientation::CopyFrom(const DronePose_Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drone_pose_plugin.DronePose.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DronePose_Orientation::IsInitialized() const {
  return true;
}

void DronePose_Orientation::InternalSwap(DronePose_Orientation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DronePose_Orientation, z_)
      + sizeof(DronePose_Orientation::z_)
      - PROTOBUF_FIELD_OFFSET(DronePose_Orientation, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DronePose_Orientation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DronePose::InitAsDefaultInstance() {
  ::drone_pose_plugin::_DronePose_default_instance_._instance.get_mutable()->position_ = const_cast< ::drone_pose_plugin::DronePose_Position*>(
      ::drone_pose_plugin::DronePose_Position::internal_default_instance());
  ::drone_pose_plugin::_DronePose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::drone_pose_plugin::DronePose_Orientation*>(
      ::drone_pose_plugin::DronePose_Orientation::internal_default_instance());
}
class DronePose::_Internal {
 public:
  static const ::drone_pose_plugin::DronePose_Position& position(const DronePose* msg);
  static const ::drone_pose_plugin::DronePose_Orientation& orientation(const DronePose* msg);
};

const ::drone_pose_plugin::DronePose_Position&
DronePose::_Internal::position(const DronePose* msg) {
  return *msg->position_;
}
const ::drone_pose_plugin::DronePose_Orientation&
DronePose::_Internal::orientation(const DronePose* msg) {
  return *msg->orientation_;
}
DronePose::DronePose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:drone_pose_plugin.DronePose)
}
DronePose::DronePose(const DronePose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::drone_pose_plugin::DronePose_Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::drone_pose_plugin::DronePose_Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drone_pose_plugin.DronePose)
}

void DronePose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DronePose_drone_5fpose_5fstamped_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

DronePose::~DronePose() {
  // @@protoc_insertion_point(destructor:drone_pose_plugin.DronePose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DronePose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void DronePose::ArenaDtor(void* object) {
  DronePose* _this = reinterpret_cast< DronePose* >(object);
  (void)_this;
}
void DronePose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DronePose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DronePose& DronePose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DronePose_drone_5fpose_5fstamped_2eproto.base);
  return *internal_default_instance();
}


void DronePose::Clear() {
// @@protoc_insertion_point(message_clear_start:drone_pose_plugin.DronePose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DronePose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .drone_pose_plugin.DronePose.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .drone_pose_plugin.DronePose.Orientation orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DronePose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drone_pose_plugin.DronePose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .drone_pose_plugin.DronePose.Position position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .drone_pose_plugin.DronePose.Orientation orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drone_pose_plugin.DronePose)
  return target;
}

size_t DronePose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drone_pose_plugin.DronePose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .drone_pose_plugin.DronePose.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .drone_pose_plugin.DronePose.Orientation orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DronePose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drone_pose_plugin.DronePose)
  GOOGLE_DCHECK_NE(&from, this);
  const DronePose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DronePose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drone_pose_plugin.DronePose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drone_pose_plugin.DronePose)
    MergeFrom(*source);
  }
}

void DronePose::MergeFrom(const DronePose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drone_pose_plugin.DronePose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::drone_pose_plugin::DronePose_Position::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::drone_pose_plugin::DronePose_Orientation::MergeFrom(from._internal_orientation());
  }
}

void DronePose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drone_pose_plugin.DronePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DronePose::CopyFrom(const DronePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drone_pose_plugin.DronePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DronePose::IsInitialized() const {
  return true;
}

void DronePose::InternalSwap(DronePose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DronePose, orientation_)
      + sizeof(DronePose::orientation_)
      - PROTOBUF_FIELD_OFFSET(DronePose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DronePose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DronePoseStamped::InitAsDefaultInstance() {
  ::drone_pose_plugin::_DronePoseStamped_default_instance_._instance.get_mutable()->header_ = const_cast< ::drone_pose_plugin::DroneHeader*>(
      ::drone_pose_plugin::DroneHeader::internal_default_instance());
  ::drone_pose_plugin::_DronePoseStamped_default_instance_._instance.get_mutable()->pose_ = const_cast< ::drone_pose_plugin::DronePose*>(
      ::drone_pose_plugin::DronePose::internal_default_instance());
}
class DronePoseStamped::_Internal {
 public:
  static const ::drone_pose_plugin::DroneHeader& header(const DronePoseStamped* msg);
  static const ::drone_pose_plugin::DronePose& pose(const DronePoseStamped* msg);
};

const ::drone_pose_plugin::DroneHeader&
DronePoseStamped::_Internal::header(const DronePoseStamped* msg) {
  return *msg->header_;
}
const ::drone_pose_plugin::DronePose&
DronePoseStamped::_Internal::pose(const DronePoseStamped* msg) {
  return *msg->pose_;
}
DronePoseStamped::DronePoseStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:drone_pose_plugin.DronePoseStamped)
}
DronePoseStamped::DronePoseStamped(const DronePoseStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::drone_pose_plugin::DroneHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::drone_pose_plugin::DronePose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drone_pose_plugin.DronePoseStamped)
}

void DronePoseStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DronePoseStamped_drone_5fpose_5fstamped_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pose_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pose_));
}

DronePoseStamped::~DronePoseStamped() {
  // @@protoc_insertion_point(destructor:drone_pose_plugin.DronePoseStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DronePoseStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
}

void DronePoseStamped::ArenaDtor(void* object) {
  DronePoseStamped* _this = reinterpret_cast< DronePoseStamped* >(object);
  (void)_this;
}
void DronePoseStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DronePoseStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DronePoseStamped& DronePoseStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DronePoseStamped_drone_5fpose_5fstamped_2eproto.base);
  return *internal_default_instance();
}


void DronePoseStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:drone_pose_plugin.DronePoseStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DronePoseStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .drone_pose_plugin.DroneHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .drone_pose_plugin.DronePose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DronePoseStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drone_pose_plugin.DronePoseStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .drone_pose_plugin.DroneHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .drone_pose_plugin.DronePose pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drone_pose_plugin.DronePoseStamped)
  return target;
}

size_t DronePoseStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drone_pose_plugin.DronePoseStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .drone_pose_plugin.DroneHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .drone_pose_plugin.DronePose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DronePoseStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drone_pose_plugin.DronePoseStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const DronePoseStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DronePoseStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drone_pose_plugin.DronePoseStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drone_pose_plugin.DronePoseStamped)
    MergeFrom(*source);
  }
}

void DronePoseStamped::MergeFrom(const DronePoseStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drone_pose_plugin.DronePoseStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::drone_pose_plugin::DroneHeader::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::drone_pose_plugin::DronePose::MergeFrom(from._internal_pose());
  }
}

void DronePoseStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drone_pose_plugin.DronePoseStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DronePoseStamped::CopyFrom(const DronePoseStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drone_pose_plugin.DronePoseStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DronePoseStamped::IsInitialized() const {
  return true;
}

void DronePoseStamped::InternalSwap(DronePoseStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DronePoseStamped, pose_)
      + sizeof(DronePoseStamped::pose_)
      - PROTOBUF_FIELD_OFFSET(DronePoseStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DronePoseStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drone_pose_plugin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::drone_pose_plugin::DroneHeader_DroneStamp* Arena::CreateMaybeMessage< ::drone_pose_plugin::DroneHeader_DroneStamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drone_pose_plugin::DroneHeader_DroneStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drone_pose_plugin::DroneHeader_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::drone_pose_plugin::DroneHeader* Arena::CreateMaybeMessage< ::drone_pose_plugin::DroneHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drone_pose_plugin::DroneHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::drone_pose_plugin::DronePose_Position* Arena::CreateMaybeMessage< ::drone_pose_plugin::DronePose_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drone_pose_plugin::DronePose_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::drone_pose_plugin::DronePose_Orientation* Arena::CreateMaybeMessage< ::drone_pose_plugin::DronePose_Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drone_pose_plugin::DronePose_Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::drone_pose_plugin::DronePose* Arena::CreateMaybeMessage< ::drone_pose_plugin::DronePose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drone_pose_plugin::DronePose >(arena);
}
template<> PROTOBUF_NOINLINE ::drone_pose_plugin::DronePoseStamped* Arena::CreateMaybeMessage< ::drone_pose_plugin::DronePoseStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drone_pose_plugin::DronePoseStamped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
