[0.000000] (-) TimerEvent: {}
[0.000389] (-) JobUnselected: {'identifier': 'controller_prototype'}
[0.000552] (-) JobUnselected: {'identifier': 'gps_converter'}
[0.000568] (-) JobUnselected: {'identifier': 'libmavconn'}
[0.000598] (-) JobUnselected: {'identifier': 'load_imu_subscriber'}
[0.000610] (-) JobUnselected: {'identifier': 'mavros'}
[0.000627] (-) JobUnselected: {'identifier': 'mavros_extras'}
[0.000641] (-) JobUnselected: {'identifier': 'mavros_msgs'}
[0.000787] (-) JobUnselected: {'identifier': 'move_forward'}
[0.000821] (-) JobUnselected: {'identifier': 'pid_prototype'}
[0.000841] (-) JobUnselected: {'identifier': 'px4_msgs'}
[0.000860] (angle_calculator) JobQueued: {'identifier': 'angle_calculator', 'dependencies': OrderedDict()}
[0.000881] (angle_calculator) JobStarted: {'identifier': 'angle_calculator'}
[0.100312] (-) TimerEvent: {}
[0.132315] (angle_calculator) JobProgress: {'identifier': 'angle_calculator', 'progress': 'cmake'}
[0.132858] (angle_calculator) JobProgress: {'identifier': 'angle_calculator', 'progress': 'build'}
[0.133507] (angle_calculator) Command: {'cmd': ['/home/luky/.local/bin/cmake', '--build', '/home/luky/mavros_ros2_ws/src/build/angle_calculator', '--', '-j8', '-l8'], 'cwd': '/home/luky/mavros_ros2_ws/src/build/angle_calculator', 'env': OrderedDict([('GITHUB_TOKEN', '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'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('LANGUAGE', 'en_US:en'), ('USER', 'luky'), ('LC_TIME', 'cs_CZ.UTF-8'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/luky/mavros_ros2_ws/install/px4_msgs/lib:/home/luky/mavros_ros2_ws/install/mavros_extras/lib:/home/luky/mavros_ros2_ws/install/mavros/lib:/home/luky/mavros_ros2_ws/install/mavros_msgs/lib:/home/luky/mavros_ros2_ws/install/libmavconn/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/luky'), ('CONDA_SHLVL', '0'), ('OLDPWD', '/home/luky/mavros_ros2_ws/src/angle_calculator'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('LC_MONETARY', 'cs_CZ.UTF-8'), ('SYSTEMD_EXEC_PID', '2236'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1001/bus'), ('COLORTERM', 'truecolor'), ('_CE_M', ''), ('IM_CONFIG_PHASE', '1'), ('COLCON_PREFIX_PATH', '/home/luky/mavros_ros2_ws/install:/home/luky/ros2_ws/install'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'ibus'), ('LOGNAME', 'luky'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'luky'), ('TERM', 'xterm-256color'), ('GAZEBO_MODEL_PATH', ':/home/luky/px4-SITL/PX4-Autopilot/Tools/simulation/gz/models'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('_CE_CONDA', ''), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/opt/ros/humble/bin:/home/luky/miniconda3/condabin:/opt/gcc-arm-none-eabi-9-2020-q2-update/bin:/home/luky/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/laptop:@/tmp/.ICE-unix/2081,unix/laptop:/tmp/.ICE-unix/2081'), ('PAPERSIZE', 'a4'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'cs_CZ.UTF-8'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/80735eb4_e23d_4368_9c74_d703fff0fc59'), ('XDG_RUNTIME_DIR', '/run/user/1001'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('LC_TELEPHONE', 'cs_CZ.UTF-8'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1001/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.113'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1001/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/luky/mavros_ros2_ws/install/move_forward:/home/luky/mavros_ros2_ws/install/px4_msgs:/home/luky/mavros_ros2_ws/install/pid_prototype:/home/luky/mavros_ros2_ws/install/mavros_extras:/home/luky/mavros_ros2_ws/install/mavros:/home/luky/mavros_ros2_ws/install/mavros_msgs:/home/luky/mavros_ros2_ws/install/load_imu_subscriber:/home/luky/mavros_ros2_ws/install/libmavconn:/home/luky/mavros_ros2_ws/install/gps_converter:/home/luky/mavros_ros2_ws/install/controller_prototype:/home/luky/mavros_ros2_ws/install/angle_calculator:/home/luky/ros2_ws/install/my_robot_controller:/opt/ros/humble'), ('CONDA_PYTHON_EXE', '/home/luky/miniconda3/bin/python'), ('SHELL', '/bin/bash'), ('LC_NAME', 'cs_CZ.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'cs_CZ.UTF-8'), ('GPG_AGENT_INFO', '/run/user/1001/gnupg/S.gpg-agent:0:1'), ('LC_IDENTIFICATION', 'cs_CZ.UTF-8'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/luky/mavros_ros2_ws/src/build/angle_calculator'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('CONDA_EXE', '/home/luky/miniconda3/bin/conda'), ('GAZEBO_PLUGIN_PATH', '/usr/include/gz/sim7/ignition/gazebo.hh:/home/luky/Desktop/backup/gz_pose_plugin:/usr/lib/x68_64-linux-gnu/gz-sim-7/plugins'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/luky/mavros_ros2_ws/install/px4_msgs/local/lib/python3.10/dist-packages:/home/luky/mavros_ros2_ws/install/mavros/local/lib/python3.10/dist-packages:/home/luky/mavros_ros2_ws/install/mavros_msgs/local/lib/python3.10/dist-packages:/home/luky/ros2_ws/build/my_robot_controller:/home/luky/ros2_ws/install/my_robot_controller/lib/python3.10/site-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'cs_CZ.UTF-8'), ('LC_PAPER', 'cs_CZ.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/luky/mavros_ros2_ws/install/move_forward:/home/luky/mavros_ros2_ws/install/px4_msgs:/home/luky/mavros_ros2_ws/install/pid_prototype:/home/luky/mavros_ros2_ws/install/mavros_extras:/home/luky/mavros_ros2_ws/install/mavros:/home/luky/mavros_ros2_ws/install/mavros_msgs:/home/luky/mavros_ros2_ws/install/load_imu_subscriber:/home/luky/mavros_ros2_ws/install/libmavconn:/home/luky/mavros_ros2_ws/install/gps_converter:/home/luky/mavros_ros2_ws/install/controller_prototype:/home/luky/mavros_ros2_ws/install/angle_calculator:/home/luky/ros2_ws/install/my_robot_controller:/opt/ros/humble')]), 'shell': False}
[0.201609] (-) TimerEvent: {}
[0.209662] (angle_calculator) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/angle_calculator_node.dir/src/angle_calculator_node.cpp.o\x1b[0m\n'}
[0.301855] (-) TimerEvent: {}
[0.402651] (-) TimerEvent: {}
[0.502968] (-) TimerEvent: {}
[0.603346] (-) TimerEvent: {}
[0.703785] (-) TimerEvent: {}
[0.804390] (-) TimerEvent: {}
[0.904853] (-) TimerEvent: {}
[1.005452] (-) TimerEvent: {}
[1.105819] (-) TimerEvent: {}
[1.206200] (-) TimerEvent: {}
[1.306600] (-) TimerEvent: {}
[1.407172] (-) TimerEvent: {}
[1.508066] (-) TimerEvent: {}
[1.608644] (-) TimerEvent: {}
[1.708937] (-) TimerEvent: {}
[1.809213] (-) TimerEvent: {}
[1.909730] (-) TimerEvent: {}
[2.010225] (-) TimerEvent: {}
[2.110516] (-) TimerEvent: {}
[2.210788] (-) TimerEvent: {}
[2.311213] (-) TimerEvent: {}
[2.411667] (-) TimerEvent: {}
[2.512017] (-) TimerEvent: {}
[2.612362] (-) TimerEvent: {}
[2.712670] (-) TimerEvent: {}
[2.812989] (-) TimerEvent: {}
[2.913533] (-) TimerEvent: {}
[2.973655] (angle_calculator) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/pstl/glue_algorithm_defs.h:13\x1b[m\x1b[K,\n'}
[2.973873] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/algorithm:74\x1b[m\x1b[K,\n'}
[2.973950] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:18\x1b[m\x1b[K,\n'}
[2.974019] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[2.974086] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.974128] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.974168] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:1\x1b[m\x1b[K:\n'}
[2.974208] (angle_calculator) StderrLine: {'line': b'/usr/include/c++/11/functional: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_check_arity<void (AngleCalculator::*)(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >), AngleCalculator*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.974252] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:768:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_helper<false, void (AngleCalculator::*)(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >), AngleCalculator*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.974293] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:789:5:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = void (AngleCalculator::*)(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >); _BoundArgs = {AngleCalculator*, const std::_Placeholder<1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.974336] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:13:40:\x1b[m\x1b[K   required from here\n'}
[2.974375] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: Wrong number of arguments for pointer-to-member\n'}
[2.974416] (angle_calculator) StderrLine: {'line': b'  755 |       static_assert(_Varargs::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K\n'}
[2.974456] (angle_calculator) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K~~~~~\x1b[m\x1b[K\n'}
[2.974495] (angle_calculator) StderrLine: {'line': b'  756 | \x1b[01;31m\x1b[K                    ? sizeof...(_BoundArgs) >= _Arity::value + 1\x1b[m\x1b[K\n'}
[2.974538] (angle_calculator) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.974576] (angle_calculator) StderrLine: {'line': b'  757 | \x1b[01;31m\x1b[K                    : sizeof...(_BoundArgs) == _Arity::value + 1\x1b[m\x1b[K,\n'}
[2.974615] (angle_calculator) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.974653] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K(false ? (2 >= (((long unsigned int)std::integral_constant<long unsigned int, 2>::value) + 1)) : (2 == (((long unsigned int)std::integral_constant<long unsigned int, 2>::value) + 1)))\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[3.013596] (-) TimerEvent: {}
[3.113895] (-) TimerEvent: {}
[3.214468] (-) TimerEvent: {}
[3.314737] (-) TimerEvent: {}
[3.415192] (-) TimerEvent: {}
[3.446186] (angle_calculator) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[3.446449] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[3.446515] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.446577] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.446638] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.446682] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.446726] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.446843] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.446888] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.446930] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.446972] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:1\x1b[m\x1b[K:\n'}
[3.447015] (angle_calculator) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.447263] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.447360] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.447412] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.447467] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.447518] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:12:84:\x1b[m\x1b[K   required from here\n'}
[3.447561] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>::function(std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.447605] (angle_calculator) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[3.447646] (angle_calculator) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.447687] (angle_calculator) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[3.447728] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[3.447771] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.447809] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:1\x1b[m\x1b[K:\n'}
[3.447849] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.447891] (angle_calculator) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[3.447933] (angle_calculator) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.447974] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.448016] (angle_calculator) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[3.448054] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_pair.h:59\x1b[m\x1b[K,\n'}
[3.448092] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_algobase.h:64\x1b[m\x1b[K,\n'}
[3.448133] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:63\x1b[m\x1b[K,\n'}
[3.448170] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[3.448213] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:1\x1b[m\x1b[K:\n'}
[3.448257] (angle_calculator) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.448320] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>::_Callable<std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>&, std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>, std::__invoke_result<std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>&, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > > > >; _Tp = void; _Res = void; _ArgTypes = {std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448388] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448436] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448491] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448567] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448618] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448676] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:12:84:\x1b[m\x1b[K   required from here\n'}
[3.448718] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.448762] (angle_calculator) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[3.448802] (angle_calculator) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.448841] (angle_calculator) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[3.448885] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[3.448932] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.448988] (angle_calculator) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:1\x1b[m\x1b[K:\n'}
[3.449057] (angle_calculator) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.449133] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.449218] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.449404] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.449476] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Pose_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.449625] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/home/luky/mavros_ros2_ws/src/angle_calculator/src/angle_calculator_node.cpp:12:84:\x1b[m\x1b[K   required from here\n'}
[3.449679] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.449738] (angle_calculator) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[3.449797] (angle_calculator) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.449852] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.449906] (angle_calculator) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[3.449963] (angle_calculator) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.450016] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450059] (angle_calculator) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[3.450100] (angle_calculator) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.450138] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450181] (angle_calculator) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[3.450219] (angle_calculator) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.450258] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450304] (angle_calculator) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[3.450344] (angle_calculator) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.450382] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (AngleCalculator::*(AngleCalculator*, std::_Placeholder<1>))(std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450422] (angle_calculator) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[3.450461] (angle_calculator) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[3.450500] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >, std::shared_ptr<geometry_msgs::msg::Pose_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.450556] (angle_calculator) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[3.450599] (angle_calculator) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.450637] (angle_calculator) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[3.515261] (-) TimerEvent: {}
[3.615581] (-) TimerEvent: {}
[3.716071] (-) TimerEvent: {}
[3.816481] (-) TimerEvent: {}
[3.916908] (-) TimerEvent: {}
[4.017155] (-) TimerEvent: {}
[4.117534] (-) TimerEvent: {}
[4.217935] (-) TimerEvent: {}
[4.318417] (-) TimerEvent: {}
[4.418818] (-) TimerEvent: {}
[4.519391] (-) TimerEvent: {}
[4.619692] (-) TimerEvent: {}
[4.720009] (-) TimerEvent: {}
[4.820649] (-) TimerEvent: {}
[4.920978] (-) TimerEvent: {}
[5.021326] (-) TimerEvent: {}
[5.121642] (-) TimerEvent: {}
[5.222375] (-) TimerEvent: {}
[5.323282] (-) TimerEvent: {}
[5.424002] (-) TimerEvent: {}
[5.524337] (-) TimerEvent: {}
[5.624791] (-) TimerEvent: {}
[5.725156] (-) TimerEvent: {}
[5.816188] (angle_calculator) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/angle_calculator_node.dir/build.make:76: CMakeFiles/angle_calculator_node.dir/src/angle_calculator_node.cpp.o] Error 1\n'}
[5.816382] (angle_calculator) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/angle_calculator_node.dir/all] Error 2\n'}
[5.816489] (angle_calculator) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[5.824906] (angle_calculator) CommandEnded: {'returncode': 2}
[5.825807] (-) TimerEvent: {}
[5.926472] (-) TimerEvent: {}
[5.946851] (angle_calculator) JobEnded: {'identifier': 'angle_calculator', 'rc': 2}
[5.957691] (-) EventReactorShutdown: {}
